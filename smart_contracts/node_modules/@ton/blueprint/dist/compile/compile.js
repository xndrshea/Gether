"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.compile = exports.doCompile = exports.COMPILE_END = exports.getCompilablesDirectory = void 0;
const func_js_1 = require("@ton-community/func-js");
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
const core_1 = require("@ton/core");
const paths_1 = require("../paths");
const Tact = __importStar(require("@tact-lang/compiler"));
const OverwritableVirtualFileSystem_1 = require("./OverwritableVirtualFileSystem");
const utils_1 = require("../config/utils");
async function getCompilablesDirectory() {
    const config = await (0, utils_1.getConfig)();
    if (config?.separateCompilables) {
        return paths_1.COMPILABLES_DIR;
    }
    return paths_1.WRAPPERS_DIR;
}
exports.getCompilablesDirectory = getCompilablesDirectory;
exports.COMPILE_END = '.compile.ts';
async function getCompilerConfigForContract(name) {
    var _a;
    const compilablesDirectory = await getCompilablesDirectory();
    const mod = await (_a = path_1.default.join(compilablesDirectory, name + exports.COMPILE_END), Promise.resolve().then(() => __importStar(require(_a))));
    if (typeof mod.compile !== 'object') {
        throw new Error(`Object 'compile' is missing`);
    }
    return mod.compile;
}
async function doCompileFunc(config) {
    const cr = await (0, func_js_1.compileFunc)(config);
    if (cr.status === 'error')
        throw new Error(cr.message);
    let targets = [];
    if (config.targets) {
        targets = config.targets;
    }
    else if (Array.isArray(config.sources)) {
        targets = config.sources.map((s) => s.filename);
    }
    return {
        lang: 'func',
        code: core_1.Cell.fromBase64(cr.codeBoc),
        targets,
        snapshot: cr.snapshot,
        version: (await (0, func_js_1.compilerVersion)()).funcVersion,
    };
}
function findTactBoc(fs) {
    let buf = undefined;
    for (const [k, v] of fs) {
        if (k.endsWith('.code.boc')) {
            buf = v;
            break;
        }
    }
    if (buf === undefined) {
        throw new Error('Could not find boc in tact compilation result');
    }
    return core_1.Cell.fromBoc(buf)[0];
}
function getRootTactConfigOptionsForContract(name) {
    if (!(0, fs_1.existsSync)(paths_1.TACT_ROOT_CONFIG)) {
        return undefined;
    }
    const config = Tact.parseConfig((0, fs_1.readFileSync)(paths_1.TACT_ROOT_CONFIG).toString());
    for (const project of config.projects) {
        if (project.name === name) {
            return project.options;
        }
    }
    return undefined;
}
async function doCompileTact(config, name) {
    const rootConfigOptions = getRootTactConfigOptionsForContract(name);
    const fs = new OverwritableVirtualFileSystem_1.OverwritableVirtualFileSystem(process.cwd());
    const buildConfig = {
        config: {
            name: 'tact',
            path: config.target,
            output: path_1.default.join(paths_1.BUILD_DIR, name),
            options: { ...rootConfigOptions, ...config.options },
        },
        stdlib: '/stdlib',
        project: fs,
    };
    const res = await Tact.build(buildConfig);
    if (!res) {
        throw new Error('Could not compile tact');
    }
    const code = findTactBoc(fs.overwrites);
    return {
        lang: 'tact',
        fs: fs.overwrites,
        code,
        options: buildConfig.config.options,
    };
}
async function doCompileInner(name, config) {
    if (config.lang === 'tact') {
        return await doCompileTact(config, name);
    }
    return await doCompileFunc({
        targets: config.targets,
        sources: config.sources ?? ((path) => (0, fs_1.readFileSync)(path).toString()),
        optLevel: config.optLevel,
    });
}
async function doCompile(name, opts) {
    const config = await getCompilerConfigForContract(name);
    if (config.preCompileHook !== undefined) {
        await config.preCompileHook({
            userData: opts?.hookUserData,
        });
    }
    const res = await doCompileInner(name, config);
    if (config.postCompileHook !== undefined) {
        await config.postCompileHook(res.code, {
            userData: opts?.hookUserData,
        });
    }
    return res;
}
exports.doCompile = doCompile;
async function compile(name, opts) {
    const result = await doCompile(name, opts);
    return result.code;
}
exports.compile = compile;
