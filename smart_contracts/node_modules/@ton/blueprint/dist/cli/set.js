"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.set = void 0;
const promises_1 = require("fs/promises");
const node_child_process_1 = require("node:child_process");
const path_1 = __importDefault(require("path"));
const arg_1 = __importDefault(require("arg"));
const constants_1 = require("./constants");
const getVersions = (pkg, ui) => {
    return new Promise((resolve, reject) => {
        (0, node_child_process_1.exec)(`npm view ${pkg} versions --json`, (error, stdout, stderr) => {
            if (stderr) {
                ui.write(stderr);
            }
            if (stdout) {
                if (error === null) {
                    try {
                        const resJson = JSON.parse(stdout);
                        if (Array.isArray(resJson)) {
                            resolve(resJson);
                        }
                        else {
                            reject(new TypeError("Expect json array on stdout, but got:\n" + stdout));
                        }
                    }
                    catch (e) {
                        reject(e);
                    }
                    return;
                }
                else {
                    ui.write(stdout);
                }
            }
            if (error) {
                ui.write("Failed to get func-js-bin package versions!");
                reject(error);
            }
        });
    });
};
const install = (cmd, ui) => {
    return new Promise((resolve, reject) => {
        (0, node_child_process_1.exec)(cmd, (error, stdout, stderr) => {
            if (stderr) {
                ui.write(stderr);
            }
            if (stdout) {
                ui.write(stdout);
            }
            if (error) {
                reject(error);
                return;
            }
            resolve();
        });
    });
};
const set = async (args, ui) => {
    const localArgs = (0, arg_1.default)(constants_1.helpArgs);
    if (localArgs['--help']) {
        ui.write(constants_1.helpMessages['set']);
        return;
    }
    if (args._.length < 2) {
        throw new Error('Please pass a key');
    }
    switch (args._[1]) {
        case 'func': {
            const pkg = '@ton-community/func-js-bin';
            const funcVersions = await getVersions(pkg, ui);
            let version = args._.length > 2 ? args._[2] : '';
            if (!funcVersions.includes(version)) {
                version = await ui.choose('Choose FunC version', funcVersions, (s) => s);
            }
            const packagePath = path_1.default.join(process.cwd(), 'package.json');
            const packageContents = (await (0, promises_1.readFile)(packagePath)).toString('utf-8');
            const parsedPackage = JSON.parse(packageContents);
            const packageManager = await ui.choose('Choose your package manager', ['npm', 'yarn', 'pnpm', 'other'], (s) => s);
            if (packageManager === 'other') {
                ui.write(`Please find out how to override @ton-community/func-js-bin version to ${version} using your package manager, do that, and then install the packages`);
                return;
            }
            const overrideKey = packageManager === 'yarn' ? 'resolutions' : 'overrides';
            parsedPackage[overrideKey] = {
                ...parsedPackage[overrideKey],
                [pkg]: version,
            };
            ui.write('Updating package.json...');
            await (0, promises_1.writeFile)(packagePath, JSON.stringify(parsedPackage, null, 4));
            const installCmd = packageManager === 'yarn' ? 'yarn' : `${packageManager} i`;
            try {
                ui.write('Installing dependencies...');
                await install(installCmd, ui);
            }
            catch (e) {
                ui.write('Failed to install dependencies, rolling back package.json');
                await (0, promises_1.writeFile)(packagePath, packageContents);
                throw e;
            }
            break;
        }
        default: {
            throw new Error('Unknown key: ' + args._[1]);
        }
    }
};
exports.set = set;
