import { Address, Cell, Contract, ContractProvider, MessageRelaxed, Sender, SenderArguments, SendMode, StateInit } from "@ton/core";
export type Treasury = Sender & {
    address: Address;
};
/**
 * @class TreasuryContract is Wallet v4 alternative. For additional information see {@link Blockchain.treasury}
 */
export declare class TreasuryContract implements Contract {
    static readonly code: Cell;
    static create(workchain: number, subwalletId: bigint): TreasuryContract;
    readonly address: Address;
    readonly init: StateInit;
    readonly subwalletId: bigint;
    constructor(workchain: number, subwalletId: bigint);
    /**
     * Send bulk messages using one external message.
     * @param messages Messages to send
     * @param sendMode Send mode of every message
     */
    sendMessages(provider: ContractProvider, messages: MessageRelaxed[], sendMode?: SendMode): Promise<void>;
    /**
     * Sends message by arguments specified.
     */
    send(provider: ContractProvider, args: SenderArguments): Promise<void>;
    /**
     * @returns Sender
     */
    getSender(provider: ContractProvider): Treasury;
    /**
     * @returns wallet balance in nanoTONs
     */
    getBalance(provider: ContractProvider): Promise<bigint>;
    /**
     * Creates transfer cell for {@link sendMessages}.
     */
    createTransfer(args: {
        messages: MessageRelaxed[];
        sendMode?: SendMode;
    }): Cell;
}
