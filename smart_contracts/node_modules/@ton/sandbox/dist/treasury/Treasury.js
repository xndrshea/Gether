"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TreasuryContract = void 0;
const core_1 = require("@ton/core");
const DictionaryMessageValue = {
    serialize(src, builder) {
        builder.storeUint(src.sendMode, 8);
        builder.storeRef((0, core_1.beginCell)().store((0, core_1.storeMessageRelaxed)(src.message)));
    },
    parse(src) {
        let sendMode = src.loadUint(8);
        let message = (0, core_1.loadMessageRelaxed)(src.loadRef().beginParse());
        return { sendMode, message };
    },
};
function senderArgsToMessageRelaxed(args) {
    return (0, core_1.internal)({
        to: args.to,
        value: args.value,
        init: args.init,
        body: args.body,
        bounce: args.bounce
    });
}
/**
 * @class TreasuryContract is Wallet v4 alternative. For additional information see {@link Blockchain.treasury}
 */
class TreasuryContract {
    static create(workchain, subwalletId) {
        return new TreasuryContract(workchain, subwalletId);
    }
    constructor(workchain, subwalletId) {
        const data = (0, core_1.beginCell)()
            .storeUint(subwalletId, 256)
            .endCell();
        this.init = { code: TreasuryContract.code, data };
        this.address = (0, core_1.contractAddress)(workchain, this.init);
        this.subwalletId = subwalletId;
    }
    /**
     * Send bulk messages using one external message.
     * @param messages Messages to send
     * @param sendMode Send mode of every message
     */
    async sendMessages(provider, messages, sendMode) {
        let transfer = this.createTransfer({
            sendMode: sendMode,
            messages: messages
        });
        await provider.external(transfer);
    }
    /**
     * Sends message by arguments specified.
     */
    async send(provider, args) {
        await this.sendMessages(provider, [senderArgsToMessageRelaxed(args)], args.sendMode ?? undefined);
    }
    /**
     * @returns Sender
     */
    getSender(provider) {
        return {
            address: this.address,
            send: async (args) => {
                let transfer = this.createTransfer({
                    sendMode: args.sendMode ?? undefined,
                    messages: [senderArgsToMessageRelaxed(args)]
                });
                await provider.external(transfer);
            }
        };
    }
    /**
     * @returns wallet balance in nanoTONs
     */
    async getBalance(provider) {
        return (await provider.getState()).balance;
    }
    /**
     * Creates transfer cell for {@link sendMessages}.
     */
    createTransfer(args) {
        let sendMode = core_1.SendMode.PAY_GAS_SEPARATELY;
        if (args.sendMode !== null && args.sendMode !== undefined) {
            sendMode = args.sendMode;
        }
        if (args.messages.length > 255) {
            throw new Error('Maximum number of messages is 255');
        }
        let messages = core_1.Dictionary.empty(core_1.Dictionary.Keys.Int(16), DictionaryMessageValue);
        let index = 0;
        for (let m of args.messages) {
            messages.set(index++, { sendMode, message: m });
        }
        return (0, core_1.beginCell)()
            .storeUint(this.subwalletId, 256)
            .storeDict(messages)
            .endCell();
    }
}
exports.TreasuryContract = TreasuryContract;
TreasuryContract.code = core_1.Cell.fromBase64('te6cckEBBAEARQABFP8A9KQT9LzyyAsBAgEgAwIAWvLT/+1E0NP/0RK68qL0BNH4AH+OFiGAEPR4b6UgmALTB9QwAfsAkTLiAbPmWwAE0jD+omUe');
