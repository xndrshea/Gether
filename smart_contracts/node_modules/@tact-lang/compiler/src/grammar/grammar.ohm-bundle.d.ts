// AUTOGENERATED FILE
// This file was generated from grammar.ohm by `ohm generateBundles`.

import {
  BaseActionDict,
  Grammar,
  IterationNode,
  Node,
  NonterminalNode,
  Semantics,
  TerminalNode
} from 'ohm-js';

export interface TactActionDict<T> extends BaseActionDict<T> {
  Module?: (this: NonterminalNode, arg0: IterationNode, arg1: IterationNode) => T;
  ModuleItem?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Import?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: TerminalNode) => T;
  JustImports?: (this: NonterminalNode, arg0: IterationNode, arg1: IterationNode) => T;
  PrimitiveTypeDecl?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: TerminalNode) => T;
  ModuleFunction?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ModuleConstant?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  NativeFunctionDecl?: (this: NonterminalNode, arg0: TerminalNode, arg1: TerminalNode, arg2: NonterminalNode, arg3: TerminalNode, arg4: IterationNode, arg5: NonterminalNode, arg6: NonterminalNode, arg7: NonterminalNode, arg8: IterationNode, arg9: IterationNode, arg10: TerminalNode) => T;
  Type_optional?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode) => T;
  Type_regular?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Type_map?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode, arg3: IterationNode, arg4: IterationNode, arg5: TerminalNode, arg6: NonterminalNode, arg7: IterationNode, arg8: IterationNode, arg9: TerminalNode) => T;
  Type_bounced?: (this: NonterminalNode, arg0: TerminalNode, arg1: TerminalNode, arg2: NonterminalNode, arg3: TerminalNode) => T;
  Type?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  FieldDecl?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode, arg3: IterationNode, arg4: IterationNode, arg5: IterationNode, arg6: IterationNode) => T;
  ConstantAttribute_virtual?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ConstantAttribute_override?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ConstantAttribute_abstract?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ConstantAttribute?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ConstantDefinition?: (this: NonterminalNode, arg0: IterationNode, arg1: NonterminalNode, arg2: NonterminalNode, arg3: TerminalNode, arg4: NonterminalNode, arg5: TerminalNode, arg6: NonterminalNode, arg7: TerminalNode) => T;
  ConstantDeclaration?: (this: NonterminalNode, arg0: IterationNode, arg1: NonterminalNode, arg2: NonterminalNode, arg3: TerminalNode, arg4: NonterminalNode, arg5: TerminalNode) => T;
  StructDecl_regular?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode, arg3: NonterminalNode, arg4: TerminalNode) => T;
  StructDecl_message?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode, arg2: IterationNode, arg3: IterationNode, arg4: NonterminalNode, arg5: TerminalNode, arg6: NonterminalNode, arg7: TerminalNode) => T;
  StructDecl?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  StructField?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  StructFields?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode) => T;
  Contract?: (this: NonterminalNode, arg0: IterationNode, arg1: NonterminalNode, arg2: NonterminalNode, arg3: IterationNode, arg4: IterationNode, arg5: TerminalNode, arg6: IterationNode, arg7: TerminalNode) => T;
  ContractItemDecl?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Trait?: (this: NonterminalNode, arg0: IterationNode, arg1: NonterminalNode, arg2: NonterminalNode, arg3: IterationNode, arg4: IterationNode, arg5: TerminalNode, arg6: IterationNode, arg7: TerminalNode) => T;
  InheritedTraits?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode) => T;
  TraitItemDecl?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  StorageVar?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode) => T;
  ContractInit?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode, arg3: IterationNode, arg4: TerminalNode) => T;
  ContractAttribute_interface?: (this: NonterminalNode, arg0: TerminalNode, arg1: TerminalNode, arg2: NonterminalNode, arg3: TerminalNode) => T;
  ContractAttribute?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  FunctionAttribute_getter?: (this: NonterminalNode, arg0: TerminalNode) => T;
  FunctionAttribute_mutates?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  FunctionAttribute_extends?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  FunctionAttribute_virtual?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  FunctionAttribute_override?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  FunctionAttribute_inline?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  FunctionAttribute_abstract?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  FunctionAttribute?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  FunctionDefinition?: (this: NonterminalNode, arg0: IterationNode, arg1: NonterminalNode, arg2: NonterminalNode, arg3: NonterminalNode, arg4: IterationNode, arg5: IterationNode, arg6: TerminalNode, arg7: IterationNode, arg8: TerminalNode) => T;
  FunctionDeclaration?: (this: NonterminalNode, arg0: IterationNode, arg1: NonterminalNode, arg2: NonterminalNode, arg3: NonterminalNode, arg4: IterationNode, arg5: IterationNode, arg6: TerminalNode) => T;
  Parameters?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: IterationNode, arg3: TerminalNode) => T;
  Parameter?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  Receiver_regular?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: IterationNode, arg3: TerminalNode, arg4: TerminalNode, arg5: IterationNode, arg6: TerminalNode) => T;
  Receiver_comment?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode, arg3: TerminalNode, arg4: TerminalNode, arg5: IterationNode, arg6: TerminalNode) => T;
  Receiver_bounced?: (this: NonterminalNode, arg0: TerminalNode, arg1: TerminalNode, arg2: NonterminalNode, arg3: TerminalNode, arg4: TerminalNode, arg5: IterationNode, arg6: TerminalNode) => T;
  Receiver_externalRegular?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: IterationNode, arg3: TerminalNode, arg4: TerminalNode, arg5: IterationNode, arg6: TerminalNode) => T;
  Receiver_externalComment?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode, arg3: TerminalNode, arg4: TerminalNode, arg5: IterationNode, arg6: TerminalNode) => T;
  Receiver?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Statement?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  StatementBlock?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode, arg2: TerminalNode) => T;
  StatementLet?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: IterationNode, arg3: IterationNode, arg4: TerminalNode, arg5: NonterminalNode, arg6: TerminalNode) => T;
  StatementReturn?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: TerminalNode) => T;
  StatementExpression?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode) => T;
  StatementAssign?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode, arg3: TerminalNode) => T;
  StatementCondition_noElse?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: TerminalNode, arg3: IterationNode, arg4: TerminalNode) => T;
  StatementCondition_withElse?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: TerminalNode, arg3: IterationNode, arg4: TerminalNode, arg5: NonterminalNode, arg6: TerminalNode, arg7: IterationNode, arg8: TerminalNode) => T;
  StatementCondition_withElseIf?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: TerminalNode, arg3: IterationNode, arg4: TerminalNode, arg5: NonterminalNode, arg6: NonterminalNode) => T;
  StatementCondition?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  StatementWhile?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode, arg3: TerminalNode, arg4: TerminalNode, arg5: IterationNode, arg6: TerminalNode) => T;
  StatementRepeat?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode, arg3: TerminalNode, arg4: TerminalNode, arg5: IterationNode, arg6: TerminalNode) => T;
  StatementUntil?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: IterationNode, arg3: TerminalNode, arg4: NonterminalNode, arg5: TerminalNode, arg6: NonterminalNode, arg7: TerminalNode, arg8: TerminalNode) => T;
  StatementTry_noCatch?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: IterationNode, arg3: TerminalNode) => T;
  StatementTry_withCatch?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: IterationNode, arg3: TerminalNode, arg4: NonterminalNode, arg5: TerminalNode, arg6: NonterminalNode, arg7: TerminalNode, arg8: TerminalNode, arg9: IterationNode, arg10: TerminalNode) => T;
  StatementTry?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  StatementForEach?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode, arg3: TerminalNode, arg4: NonterminalNode, arg5: TerminalNode, arg6: NonterminalNode, arg7: TerminalNode, arg8: TerminalNode, arg9: IterationNode, arg10: TerminalNode) => T;
  Expression?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ExpressionConditional_ternary?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode, arg3: TerminalNode, arg4: NonterminalNode) => T;
  ExpressionConditional?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ExpressionOr_or?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  ExpressionOr?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ExpressionAnd_and?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  ExpressionAnd?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ExpressionBitwiseOr_bitwiseOr?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  ExpressionBitwiseOr?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ExpressionBitwiseXor_bitwiseXor?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  ExpressionBitwiseXor?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ExpressionBitwiseAnd_bitwiseAnd?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  ExpressionBitwiseAnd?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ExpressionEquality_not?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  ExpressionEquality_eq?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  ExpressionEquality?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ExpressionCompare_gt?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  ExpressionCompare_gte?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  ExpressionCompare_lt?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  ExpressionCompare_lte?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  ExpressionCompare?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ExpressionBitwiseShift_shl?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  ExpressionBitwiseShift_shr?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  ExpressionBitwiseShift?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ExpressionAdd_add?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  ExpressionAdd_sub?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  ExpressionAdd?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ExpressionMul_mul?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  ExpressionMul_div?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  ExpressionMul_rem?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  ExpressionMul?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ExpressionUnary_minus?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode) => T;
  ExpressionUnary_plus?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode) => T;
  ExpressionUnary_not?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode) => T;
  ExpressionUnary_bitwiseNot?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode) => T;
  ExpressionUnary?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ExpressionPrimary?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ExpressionParens?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode) => T;
  ExpressionUnboxNotNull?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode) => T;
  ExpressionFieldAccess?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  ExpressionMethodCall?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode, arg3: NonterminalNode) => T;
  ExpressionStructInstance?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode, arg3: IterationNode, arg4: TerminalNode) => T;
  ExpressionStaticCall?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  ExpressionInitOf?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  StructFieldInitializer_full?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  StructFieldInitializer_punned?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  StructFieldInitializer?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Arguments?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: IterationNode, arg3: TerminalNode) => T;
  typeId?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode) => T;
  typeIdPart?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  integerLiteral?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  integerLiteralDec_nonZeroIntegerLiteralDec?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: IterationNode) => T;
  integerLiteralDec_integerLiteralWithLeadingZero?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode) => T;
  integerLiteralDec?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  integerLiteralHex?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: IterationNode, arg3: IterationNode) => T;
  integerLiteralBin?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: IterationNode, arg3: IterationNode) => T;
  integerLiteralOct?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: IterationNode, arg3: IterationNode) => T;
  binDigit?: (this: NonterminalNode, arg0: TerminalNode) => T;
  octDigit?: (this: NonterminalNode, arg0: TerminalNode) => T;
  nonZeroDigit?: (this: NonterminalNode, arg0: TerminalNode) => T;
  letterAsciiLC?: (this: NonterminalNode, arg0: TerminalNode) => T;
  letterAsciiUC?: (this: NonterminalNode, arg0: TerminalNode) => T;
  letterAscii?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  letterDigitUnderscore?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  idStart?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  idPart?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  id?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode) => T;
  funcInvalidId_notUnderscore?: (this: NonterminalNode, arg0: TerminalNode, arg1: TerminalNode) => T;
  funcInvalidId_notArithOperator?: (this: NonterminalNode, arg0: TerminalNode, arg1: TerminalNode) => T;
  funcInvalidId_notComparisonOperator?: (this: NonterminalNode, arg0: TerminalNode, arg1: TerminalNode) => T;
  funcInvalidId_notBitwiseOperator?: (this: NonterminalNode, arg0: TerminalNode, arg1: TerminalNode) => T;
  funcInvalidId_notAssignOperator?: (this: NonterminalNode, arg0: TerminalNode, arg1: TerminalNode) => T;
  funcInvalidId_notDelimiter?: (this: NonterminalNode, arg0: TerminalNode, arg1: TerminalNode) => T;
  funcInvalidId_notControlKeyword?: (this: NonterminalNode, arg0: TerminalNode, arg1: TerminalNode) => T;
  funcInvalidId_notTypeKeyword?: (this: NonterminalNode, arg0: TerminalNode, arg1: TerminalNode) => T;
  funcInvalidId_notKeyword?: (this: NonterminalNode, arg0: TerminalNode, arg1: TerminalNode) => T;
  funcInvalidId_notDirective?: (this: NonterminalNode, arg0: TerminalNode, arg1: TerminalNode) => T;
  funcInvalidId_notDecimalNumber?: (this: NonterminalNode, arg0: IterationNode, arg1: IterationNode, arg2: TerminalNode) => T;
  funcInvalidId_notHexadecimalNumber?: (this: NonterminalNode, arg0: IterationNode, arg1: TerminalNode, arg2: IterationNode, arg3: TerminalNode) => T;
  funcInvalidId?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  funcPlainId?: (this: NonterminalNode, arg0: IterationNode) => T;
  funcQuotedId?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode, arg2: TerminalNode) => T;
  funcId?: (this: NonterminalNode, arg0: IterationNode, arg1: NonterminalNode) => T;
  boolLiteral?: (this: NonterminalNode, arg0: TerminalNode) => T;
  stringLiteral?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode, arg2: TerminalNode) => T;
  nonQuoteOrBackslashChar?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  escapeSequence_backslash?: (this: NonterminalNode, arg0: TerminalNode) => T;
  escapeSequence_doubleQuote?: (this: NonterminalNode, arg0: TerminalNode) => T;
  escapeSequence_newline?: (this: NonterminalNode, arg0: TerminalNode) => T;
  escapeSequence_carriageReturn?: (this: NonterminalNode, arg0: TerminalNode) => T;
  escapeSequence_tab?: (this: NonterminalNode, arg0: TerminalNode) => T;
  escapeSequence_verticalTab?: (this: NonterminalNode, arg0: TerminalNode) => T;
  escapeSequence_backspace?: (this: NonterminalNode, arg0: TerminalNode) => T;
  escapeSequence_formFeed?: (this: NonterminalNode, arg0: TerminalNode) => T;
  escapeSequence_unicodeCodePoint?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: IterationNode, arg3: IterationNode, arg4: IterationNode, arg5: IterationNode, arg6: IterationNode, arg7: TerminalNode) => T;
  escapeSequence_unicodeEscape?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: NonterminalNode, arg3: NonterminalNode, arg4: NonterminalNode) => T;
  escapeSequence_hexEscape?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  escapeSequence?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  keyword?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  contract?: (this: NonterminalNode, arg0: TerminalNode) => T;
  let?: (this: NonterminalNode, arg0: TerminalNode) => T;
  fun?: (this: NonterminalNode, arg0: TerminalNode) => T;
  return?: (this: NonterminalNode, arg0: TerminalNode) => T;
  receive?: (this: NonterminalNode, arg0: TerminalNode) => T;
  extend?: (this: NonterminalNode, arg0: TerminalNode) => T;
  external?: (this: NonterminalNode, arg0: TerminalNode) => T;
  native?: (this: NonterminalNode, arg0: TerminalNode) => T;
  primitive?: (this: NonterminalNode, arg0: TerminalNode) => T;
  public?: (this: NonterminalNode, arg0: TerminalNode) => T;
  null?: (this: NonterminalNode, arg0: TerminalNode) => T;
  if?: (this: NonterminalNode, arg0: TerminalNode) => T;
  else?: (this: NonterminalNode, arg0: TerminalNode) => T;
  while?: (this: NonterminalNode, arg0: TerminalNode) => T;
  repeat?: (this: NonterminalNode, arg0: TerminalNode) => T;
  do?: (this: NonterminalNode, arg0: TerminalNode) => T;
  until?: (this: NonterminalNode, arg0: TerminalNode) => T;
  try?: (this: NonterminalNode, arg0: TerminalNode) => T;
  catch?: (this: NonterminalNode, arg0: TerminalNode) => T;
  foreach?: (this: NonterminalNode, arg0: TerminalNode) => T;
  as?: (this: NonterminalNode, arg0: TerminalNode) => T;
  map?: (this: NonterminalNode, arg0: TerminalNode) => T;
  mutates?: (this: NonterminalNode, arg0: TerminalNode) => T;
  extends?: (this: NonterminalNode, arg0: TerminalNode) => T;
  import?: (this: NonterminalNode, arg0: TerminalNode) => T;
  with?: (this: NonterminalNode, arg0: TerminalNode) => T;
  trait?: (this: NonterminalNode, arg0: TerminalNode) => T;
  initOf?: (this: NonterminalNode, arg0: TerminalNode) => T;
  virtual?: (this: NonterminalNode, arg0: TerminalNode) => T;
  override?: (this: NonterminalNode, arg0: TerminalNode) => T;
  inline?: (this: NonterminalNode, arg0: TerminalNode) => T;
  const?: (this: NonterminalNode, arg0: TerminalNode) => T;
  abstract?: (this: NonterminalNode, arg0: TerminalNode) => T;
  reservedWord?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  whiteSpace?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  space?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  comment?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  lineTerminator?: (this: NonterminalNode, arg0: TerminalNode) => T;
  multiLineComment?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode, arg2: TerminalNode) => T;
  singleLineComment?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode) => T;
}

export interface TactSemantics extends Semantics {
  addOperation<T>(name: string, actionDict: TactActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: TactActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: TactActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: TactActionDict<T>): this;
}

export interface TactGrammar extends Grammar {
  createSemantics(): TactSemantics;
  extendSemantics(superSemantics: TactSemantics): TactSemantics;
}

declare const grammar: TactGrammar;
export default grammar;

