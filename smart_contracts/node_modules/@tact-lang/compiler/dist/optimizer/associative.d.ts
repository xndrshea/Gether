import { AstBinaryOperation, AstExpression } from "../grammar/ast";
import { Value } from "../types/types";
import { ExpressionTransformer, Rule } from "./types";
type TransformData = {
    simplifiedExpression: AstExpression;
    safetyCondition: boolean;
};
type Transform = (x1: AstExpression, c1: Value, c2: Value) => TransformData;
declare abstract class AssociativeRewriteRule extends Rule {
    private associativeOps;
    private commutativeOps;
    constructor();
    areAssociative(op1: AstBinaryOperation, op2: AstBinaryOperation): boolean;
    isCommutative(op: AstBinaryOperation): boolean;
}
declare abstract class AllowableOpRule extends AssociativeRewriteRule {
    private allowedOps;
    constructor();
    isAllowedOp(op: AstBinaryOperation): boolean;
    areAllowedOps(op: AstBinaryOperation[]): boolean;
}
export declare class AssociativeRule1 extends AllowableOpRule {
    applyRule(ast: AstExpression, optimizer: ExpressionTransformer): AstExpression;
}
export declare class AssociativeRule2 extends AllowableOpRule {
    applyRule(ast: AstExpression, optimizer: ExpressionTransformer): AstExpression;
}
export declare class AssociativeRule3 extends Rule {
    private leftAssocTransforms;
    private rightAssocTransforms;
    private rightCommuteTransforms;
    private leftCommuteTransforms;
    private standardAdditiveCondition;
    private shiftedAdditiveCondition;
    private oppositeAdditiveCondition;
    private standardMultiplicativeCondition;
    constructor();
    private lookupTransform;
    protected getLeftAssociativityTransform(keyOp1: AstBinaryOperation, keyOp2: AstBinaryOperation): Transform | undefined;
    protected getRightAssociativityTransform(keyOp1: AstBinaryOperation, keyOp2: AstBinaryOperation): Transform | undefined;
    protected getLeftCommutativityTransform(keyOp1: AstBinaryOperation, keyOp2: AstBinaryOperation): Transform | undefined;
    protected getRightCommutativityTransform(keyOp1: AstBinaryOperation, keyOp2: AstBinaryOperation): Transform | undefined;
    applyRule(ast: AstExpression, optimizer: ExpressionTransformer): AstExpression;
}
export {};
