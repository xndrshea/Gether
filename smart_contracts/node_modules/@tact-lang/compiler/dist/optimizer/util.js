"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.modFloor = exports.sign = exports.abs = exports.divFloor = exports.checkIsBoolean = exports.checkIsName = exports.checkIsNumber = exports.checkIsBinaryOp_With_LeftValue = exports.checkIsBinaryOp_With_RightValue = exports.checkIsBinaryOpNode = exports.checkIsUnaryOpNode = exports.makeBinaryExpression = exports.makeUnaryExpression = exports.makeValueExpression = exports.extractValue = void 0;
const ast_1 = require("../grammar/ast");
const grammar_1 = require("../grammar/grammar");
const errors_1 = require("../errors");
function extractValue(ast) {
    switch (ast.kind // Missing structs
    ) {
        case "null":
            return null;
        case "boolean":
            return ast.value;
        case "number":
            return ast.value;
        case "string":
            return ast.value;
    }
}
exports.extractValue = extractValue;
function makeValueExpression(value) {
    if (value === null) {
        const result = (0, ast_1.createAstNode)({
            kind: "null",
            loc: grammar_1.dummySrcInfo,
        });
        return result;
    }
    if (typeof value === "string") {
        const result = (0, ast_1.createAstNode)({
            kind: "string",
            value: value,
            loc: grammar_1.dummySrcInfo,
        });
        return result;
    }
    if (typeof value === "bigint") {
        const result = (0, ast_1.createAstNode)({
            kind: "number",
            value: value,
            loc: grammar_1.dummySrcInfo,
        });
        return result;
    }
    if (typeof value === "boolean") {
        const result = (0, ast_1.createAstNode)({
            kind: "boolean",
            value: value,
            loc: grammar_1.dummySrcInfo,
        });
        return result;
    }
    (0, errors_1.throwInternalCompilerError)(`structs, addresses, cells, and comment values are not supported at the moment.`);
}
exports.makeValueExpression = makeValueExpression;
function makeUnaryExpression(op, operand) {
    const result = (0, ast_1.createAstNode)({
        kind: "op_unary",
        op: op,
        operand: operand,
        loc: grammar_1.dummySrcInfo,
    });
    return result;
}
exports.makeUnaryExpression = makeUnaryExpression;
function makeBinaryExpression(op, left, right) {
    const result = (0, ast_1.createAstNode)({
        kind: "op_binary",
        op: op,
        left: left,
        right: right,
        loc: grammar_1.dummySrcInfo,
    });
    return result;
}
exports.makeBinaryExpression = makeBinaryExpression;
// Checks if the top level node is an unary op node
function checkIsUnaryOpNode(ast) {
    return ast.kind === "op_unary";
}
exports.checkIsUnaryOpNode = checkIsUnaryOpNode;
// Checks if the top level node is a binary op node
function checkIsBinaryOpNode(ast) {
    return ast.kind === "op_binary";
}
exports.checkIsBinaryOpNode = checkIsBinaryOpNode;
// Checks if top level node is a binary op node
// with a value node on the right
function checkIsBinaryOp_With_RightValue(ast) {
    return ast.kind === "op_binary" ? (0, ast_1.isValue)(ast.right) : false;
}
exports.checkIsBinaryOp_With_RightValue = checkIsBinaryOp_With_RightValue;
// Checks if top level node is a binary op node
// with a value node on the left
function checkIsBinaryOp_With_LeftValue(ast) {
    return ast.kind === "op_binary" ? (0, ast_1.isValue)(ast.left) : false;
}
exports.checkIsBinaryOp_With_LeftValue = checkIsBinaryOp_With_LeftValue;
// Checks if the top level node is the specified number
function checkIsNumber(ast, n) {
    return ast.kind === "number" ? ast.value == n : false;
}
exports.checkIsNumber = checkIsNumber;
function checkIsName(ast) {
    return ast.kind === "id";
}
exports.checkIsName = checkIsName;
// Checks if the top level node is the specified boolean
function checkIsBoolean(ast, b) {
    return ast.kind === "boolean" ? ast.value == b : false;
}
exports.checkIsBoolean = checkIsBoolean;
// bigint arithmetic
// precondition: the divisor is not zero
// rounds the division result towards negative infinity
function divFloor(a, b) {
    const almostSameSign = a > 0n === b > 0n;
    if (almostSameSign) {
        return a / b;
    }
    return a / b + (a % b === 0n ? 0n : -1n);
}
exports.divFloor = divFloor;
function abs(a) {
    return a < 0n ? -a : a;
}
exports.abs = abs;
function sign(a) {
    if (a === 0n)
        return 0n;
    else
        return a < 0n ? -1n : 1n;
}
exports.sign = sign;
// precondition: the divisor is not zero
// rounds the result towards negative infinity
// Uses the fact that a / b * b + a % b == a, for all b != 0.
function modFloor(a, b) {
    return a - divFloor(a, b) * b;
}
exports.modFloor = modFloor;
