import { AstExpression, AstUnaryOperation, AstBinaryOperation, AstValue } from "../grammar/ast";
import { Value } from "../types/types";
export declare function extractValue(ast: AstValue): Value;
export declare function makeValueExpression(value: Value): AstValue;
export declare function makeUnaryExpression(op: AstUnaryOperation, operand: AstExpression): AstExpression;
export declare function makeBinaryExpression(op: AstBinaryOperation, left: AstExpression, right: AstExpression): AstExpression;
export declare function checkIsUnaryOpNode(ast: AstExpression): boolean;
export declare function checkIsBinaryOpNode(ast: AstExpression): boolean;
export declare function checkIsBinaryOp_With_RightValue(ast: AstExpression): boolean;
export declare function checkIsBinaryOp_With_LeftValue(ast: AstExpression): boolean;
export declare function checkIsNumber(ast: AstExpression, n: bigint): boolean;
export declare function checkIsName(ast: AstExpression): boolean;
export declare function checkIsBoolean(ast: AstExpression, b: boolean): boolean;
export declare function divFloor(a: bigint, b: bigint): bigint;
export declare function abs(a: bigint): bigint;
export declare function sign(a: bigint): bigint;
export declare function modFloor(a: bigint, b: bigint): bigint;
