import { AstType, AstId } from "../grammar/ast";
import { CompilerContext } from "../context";
import { ConstantDescription, FunctionDescription, TypeDescription, TypeRef } from "./types";
export declare const toBounced: (type: string) => string;
export declare function resolveTypeRef(ctx: CompilerContext, src: AstType): TypeRef;
export declare function resolveDescriptors(ctx: CompilerContext): CompilerContext;
export declare function getType(ctx: CompilerContext, ident: AstId | string): TypeDescription;
export declare function getAllTypes(ctx: CompilerContext): Record<string | number, TypeDescription>;
export declare function getContracts(ctx: CompilerContext): string[];
export declare function getStaticFunction(ctx: CompilerContext, name: string): FunctionDescription;
export declare function hasStaticFunction(ctx: CompilerContext, name: string): boolean;
export declare function getStaticConstant(ctx: CompilerContext, name: string): ConstantDescription;
export declare function hasStaticConstant(ctx: CompilerContext, name: string): boolean;
export declare function getAllStaticFunctions(ctx: CompilerContext): Record<string | number, FunctionDescription>;
export declare function getAllStaticConstants(ctx: CompilerContext): Record<string | number, ConstantDescription>;
