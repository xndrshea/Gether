"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveSignatures = void 0;
const changeCase = __importStar(require("change-case"));
const idToHex_1 = require("../utils/idToHex");
const newMessageId_1 = require("../utils/newMessageId");
const errors_1 = require("../errors");
const resolveDescriptors_1 = require("./resolveDescriptors");
const errors_2 = require("../errors");
const writeRouter_1 = require("../generator/writers/writeRouter");
function resolveSignatures(ctx) {
    const types = (0, resolveDescriptors_1.getAllTypes)(ctx);
    const signatures = new Map();
    function createTypeFormat(type, format) {
        if (type === "int") {
            if (typeof format === "number") {
                return `int${format}`;
            }
            else if (format !== null) {
                (0, errors_1.throwInternalCompilerError)(`Unsupported int format: ${format}`);
            }
            return `int`;
        }
        else if (type === "uint") {
            if (typeof format === "number") {
                return `uint${format}`;
            }
            else if (format === "coins") {
                return `coins`;
            }
            else if (format !== null) {
                (0, errors_1.throwInternalCompilerError)(`Unsupported uint format: ${format}`);
            }
            return `uint`;
        }
        else if (type === "bool") {
            if (format !== null) {
                (0, errors_1.throwInternalCompilerError)(`Unsupported bool format: ${format}`);
            }
            return "bool";
        }
        else if (type === "address") {
            if (format !== null) {
                (0, errors_1.throwInternalCompilerError)(`Unsupported address format: ${format}`);
            }
            return "address";
        }
        else if (type === "cell") {
            if (format === "remainder") {
                return "remainder<cell>";
            }
            else if (format === "ref") {
                return "^cell";
            }
            if (format !== null) {
                (0, errors_1.throwInternalCompilerError)(`Unsupported cell format: ${format}`);
            }
            return "^cell";
        }
        else if (type === "slice") {
            if (format === "remainder") {
                return "remainder<slice>";
            }
            else if (format === "ref") {
                return "^slice";
            }
            else if (format !== null) {
                (0, errors_1.throwInternalCompilerError)(`Unsupported slice format: ${format}`);
            }
            return "^slice";
        }
        else if (type === "builder") {
            if (format === "remainder") {
                return "remainder<builder>";
            }
            else if (format === "ref") {
                return "^slice";
            }
            else if (format !== null) {
                (0, errors_1.throwInternalCompilerError)(`Unsupported builder format: ${format}`);
            }
            return "^builder";
        }
        else if (type === "string") {
            if (format !== null) {
                (0, errors_1.throwInternalCompilerError)(`Unsupported builder format: ${format}`);
            }
            return "^string";
        }
        else if (type === "fixed-bytes") {
            if (typeof format === "number") {
                return `fixed_bytes${format}`;
            }
            else if (format !== null) {
                (0, errors_1.throwInternalCompilerError)(`Unsupported fixed-bytes format: ${format}`);
            }
            (0, errors_1.throwInternalCompilerError)("Missing fixed-bytes format");
        }
        // Struct types
        const t = (0, resolveDescriptors_1.getType)(ctx, type);
        if (t.kind !== "struct") {
            (0, errors_1.throwInternalCompilerError)(`Unsupported type: ${type}`);
        }
        const s = createTupleSignature(type);
        if (format === "ref") {
            return `^${s.signature}`;
        }
        else if (format !== null) {
            (0, errors_1.throwInternalCompilerError)(`Unsupported struct format: ${format}`);
        }
        return s.signature;
    }
    function createTLBField(src) {
        switch (src.type.kind) {
            case "simple": {
                let base = createTypeFormat(src.type.type, src.type.format ? src.type.format : null);
                if (src.type.optional) {
                    base = "Maybe " + base;
                }
                return src.name + ":" + base;
            }
            case "dict": {
                if (src.type.format !== null && src.type.format !== undefined) {
                    (0, errors_1.throwInternalCompilerError)(`Unsupported map format: ${src.type.format}`);
                }
                const key = createTypeFormat(src.type.key, src.type.keyFormat ? src.type.keyFormat : null);
                const value = createTypeFormat(src.type.value, src.type.valueFormat ? src.type.valueFormat : null);
                return src.name + ":dict<" + key + ", " + value + ">";
            }
        }
    }
    function createTupleSignature(name) {
        if (signatures.has(name)) {
            return signatures.get(name);
        }
        const t = (0, resolveDescriptors_1.getType)(ctx, name);
        if (t.kind !== "struct") {
            (0, errors_1.throwInternalCompilerError)(`Unsupported type: ${name}`);
        }
        const fields = t.fields.map((v) => createTLBField(v.abi));
        // Calculate signature and method id
        const signature = name + "{" + fields.join(",") + "}";
        let id = null;
        if (t.ast.kind === "message_decl") {
            if (t.ast.opcode !== null) {
                id = t.ast.opcode;
            }
            else {
                id = (0, newMessageId_1.newMessageId)(signature);
            }
        }
        // Calculate TLB
        const tlbHeader = id !== null ? changeCase.snakeCase(name) + "#" + (0, idToHex_1.idToHex)(id) : "_";
        const tlb = tlbHeader + " " + fields.join(" ") + " = " + name;
        signatures.set(name, { signature, id, tlb });
        return { signature, id, tlb };
    }
    Object.values(types).forEach((t) => {
        if (t.kind === "struct") {
            const r = createTupleSignature(t.name);
            t.tlb = r.tlb;
            t.signature = r.signature;
            t.header = r.id;
        }
    });
    checkMessageOpcodesUnique(ctx);
    return ctx;
}
exports.resolveSignatures = resolveSignatures;
function checkBinaryMessageReceiver(rcv, rcvAst, usedOpcodes, ctx) {
    const msgType = (0, resolveDescriptors_1.getType)(ctx, rcv.type);
    const opcode = msgType.header;
    if (usedOpcodes.has(opcode)) {
        (0, errors_2.throwCompilationError)(`Receive functions of a contract or trait cannot process messages with the same opcode: opcodes of message types "${rcv.type}" and "${usedOpcodes.get(opcode)}" are equal`, rcvAst.loc);
    }
    else {
        usedOpcodes.set(opcode, rcv.type);
    }
}
// "opcode" clashes are highly unlikely in this case, of course
function checkCommentMessageReceiver(rcv, rcvAst, usedOpcodes) {
    const opcode = (0, writeRouter_1.commentPseudoOpcode)(rcv.comment);
    if (usedOpcodes.has(opcode)) {
        (0, errors_2.throwCompilationError)(`Receive functions of a contract or trait cannot process comments with the same hashes: hashes of comment strings "${rcv.comment}" and "${usedOpcodes.get(opcode)}" are equal`, rcvAst.loc);
    }
    else {
        usedOpcodes.set(opcode, rcv.comment);
    }
}
function checkMessageOpcodesUniqueInContractOrTrait(receivers, ctx) {
    const binBouncedRcvUsedOpcodes = new Map();
    const binExternalRcvUsedOpcodes = new Map();
    const binInternalRcvUsedOpcodes = new Map();
    const commentExternalRcvUsedOpcodes = new Map();
    const commentInternalRcvUsedOpcodes = new Map();
    for (const rcv of receivers) {
        switch (rcv.selector.kind) {
            case "internal-binary":
                checkBinaryMessageReceiver(rcv.selector, rcv.ast, binInternalRcvUsedOpcodes, ctx);
                break;
            case "bounce-binary":
                checkBinaryMessageReceiver(rcv.selector, rcv.ast, binBouncedRcvUsedOpcodes, ctx);
                break;
            case "external-binary":
                checkBinaryMessageReceiver(rcv.selector, rcv.ast, binExternalRcvUsedOpcodes, ctx);
                break;
            case "internal-comment":
                checkCommentMessageReceiver(rcv.selector, rcv.ast, commentInternalRcvUsedOpcodes);
                break;
            case "external-comment":
                checkCommentMessageReceiver(rcv.selector, rcv.ast, commentExternalRcvUsedOpcodes);
                break;
            default:
                break;
        }
    }
}
function checkMessageOpcodesUnique(ctx) {
    const allTypes = (0, resolveDescriptors_1.getAllTypes)(ctx);
    Object.values(allTypes).forEach((aggregate) => {
        switch (aggregate.kind) {
            case "contract":
            case "trait":
                checkMessageOpcodesUniqueInContractOrTrait(aggregate.receivers, ctx);
                break;
            default:
                break;
        }
    });
}
