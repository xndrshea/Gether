"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveStatements = exports.isLvalue = exports.emptyContext = void 0;
const ast_1 = require("../grammar/ast");
const subtyping_1 = require("./subtyping");
const errors_1 = require("../errors");
const resolveDescriptors_1 = require("./resolveDescriptors");
const resolveExpression_1 = require("./resolveExpression");
const types_1 = require("./types");
function emptyContext(root, funName, returns) {
    return {
        root,
        funName,
        returns,
        vars: new Map(),
        requiredFields: [],
    };
}
exports.emptyContext = emptyContext;
function checkVariableExists(ctx, sctx, name) {
    if (sctx.vars.has((0, ast_1.idText)(name))) {
        (0, errors_1.throwCompilationError)(`Variable already exists: ${(0, errors_1.idTextErr)(name)}`, name.loc);
    }
    // Check if the user tries to shadow the current function name
    if (sctx.funName === (0, ast_1.idText)(name)) {
        (0, errors_1.throwCompilationError)(`Variable cannot have the same name as its enclosing function: ${(0, errors_1.idTextErr)(name)}`, name.loc);
    }
    if ((0, resolveDescriptors_1.hasStaticConstant)(ctx, (0, ast_1.idText)(name))) {
        if (name.loc.origin === "stdlib") {
            const constLoc = (0, resolveDescriptors_1.getStaticConstant)(ctx, (0, ast_1.idText)(name)).loc;
            (0, errors_1.throwCompilationError)(`Constant ${(0, errors_1.idTextErr)(name)} is shadowing an identifier defined in the Tact standard library: pick a different constant name`, constLoc);
        }
        else {
            (0, errors_1.throwCompilationError)(`Variable ${(0, errors_1.idTextErr)(name)} is trying to shadow an existing constant with the same name`, name.loc);
        }
    }
}
function addRequiredVariables(name, src) {
    if (src.requiredFields.find((v) => v === name)) {
        (0, errors_1.throwInternalCompilerError)(`Variable already exists: ${name}`); // Should happen earlier
    }
    return {
        ...src,
        requiredFields: [...src.requiredFields, name],
    };
}
function removeRequiredVariable(name, src) {
    if (!src.requiredFields.find((v) => v === name)) {
        (0, errors_1.throwInternalCompilerError)(`Variable is not required: ${name}`); // Should happen earlier
    }
    const filtered = src.requiredFields.filter((v) => v !== name);
    return {
        ...src,
        requiredFields: filtered,
    };
}
function addVariable(name, ref, ctx, sctx) {
    checkVariableExists(ctx, sctx, name); // Should happen earlier
    if ((0, ast_1.isWildcard)(name)) {
        return sctx;
    }
    return {
        ...sctx,
        vars: new Map(sctx.vars).set((0, ast_1.idText)(name), ref),
    };
}
function processCondition(condition, sctx, ctx) {
    // Process expression
    ctx = (0, resolveExpression_1.resolveExpression)(condition.condition, sctx, ctx);
    let initialCtx = sctx;
    // Simple if
    if (condition.falseStatements === null && condition.elseif === null) {
        const r = processStatements(condition.trueStatements, initialCtx, ctx);
        ctx = r.ctx;
        return { ctx, sctx: initialCtx, returnAlwaysReachable: false };
    }
    // Simple if-else
    const processedCtx = [];
    const returnAlwaysReachableInAllBranches = [];
    // Process true branch
    const r = processStatements(condition.trueStatements, initialCtx, ctx);
    ctx = r.ctx;
    processedCtx.push(r.sctx);
    returnAlwaysReachableInAllBranches.push(r.returnAlwaysReachable);
    // Process else/elseif branch
    if (condition.falseStatements !== null && condition.elseif === null) {
        // if-else
        const r = processStatements(condition.falseStatements, initialCtx, ctx);
        ctx = r.ctx;
        processedCtx.push(r.sctx);
        returnAlwaysReachableInAllBranches.push(r.returnAlwaysReachable);
    }
    else if (condition.falseStatements === null &&
        condition.elseif !== null) {
        // if-else if
        const r = processCondition(condition.elseif, initialCtx, ctx);
        ctx = r.ctx;
        processedCtx.push(r.sctx);
        returnAlwaysReachableInAllBranches.push(r.returnAlwaysReachable);
    }
    else {
        (0, errors_1.throwInternalCompilerError)("Impossible");
    }
    // Merge statement contexts
    const removed = [];
    for (const f of initialCtx.requiredFields) {
        let found = false;
        for (const c of processedCtx) {
            if (c.requiredFields.find((v) => v === f)) {
                found = true;
                break;
            }
        }
        if (!found) {
            removed.push(f);
        }
    }
    for (const r of removed) {
        initialCtx = removeRequiredVariable(r, initialCtx);
    }
    return {
        ctx,
        sctx: initialCtx,
        returnAlwaysReachable: returnAlwaysReachableInAllBranches.every((x) => x),
    };
}
// Precondition: `self` here means a contract or a trait,
// and not a `self` parameter of a mutating method
function isLvalue(path, ctx) {
    const headId = path[0];
    if ((0, ast_1.isSelfId)(headId) && path.length > 1) {
        // we can be dealing with a contract/trait constant `self.constFoo`
        const selfTypeRef = (0, resolveExpression_1.getExpType)(ctx, headId);
        if (selfTypeRef.kind == "ref") {
            const contractTypeDescription = (0, resolveDescriptors_1.getType)(ctx, selfTypeRef.name);
            return (contractTypeDescription.constants.findIndex((constDescr) => (0, ast_1.eqNames)(path[1], constDescr.name)) === -1);
        }
        else {
            return true;
        }
    }
    else {
        // if the head path symbol is a global constant, then the whole path expression is a constant
        return !(0, resolveDescriptors_1.hasStaticConstant)(ctx, (0, ast_1.idText)(headId));
    }
}
exports.isLvalue = isLvalue;
function processStatements(statements, sctx, ctx) {
    // Process statements
    let returnAlwaysReachable = false;
    for (const s of statements) {
        // Check for unreachable
        if (returnAlwaysReachable) {
            (0, errors_1.throwCompilationError)("Unreachable statement", s.loc);
        }
        // Process statement
        switch (s.kind) {
            case "statement_let":
                {
                    // Process expression
                    ctx = (0, resolveExpression_1.resolveExpression)(s.expression, sctx, ctx);
                    // Check variable name
                    checkVariableExists(ctx, sctx, s.name);
                    // Check type
                    const expressionType = (0, resolveExpression_1.getExpType)(ctx, s.expression);
                    if (s.type !== null) {
                        const variableType = (0, resolveDescriptors_1.resolveTypeRef)(ctx, s.type);
                        if (!(0, subtyping_1.isAssignable)(expressionType, variableType)) {
                            (0, errors_1.throwCompilationError)(`Type mismatch: "${(0, types_1.printTypeRef)(expressionType)}" is not assignable to "${(0, types_1.printTypeRef)(variableType)}"`, s.loc);
                        }
                        sctx = addVariable(s.name, variableType, ctx, sctx);
                    }
                    else {
                        if (expressionType.kind === "null") {
                            (0, errors_1.throwCompilationError)(`Cannot infer type for ${(0, errors_1.idTextErr)(s.name)}`, s.loc);
                        }
                        if (expressionType.kind === "void") {
                            (0, errors_1.throwCompilationError)(`The inferred type of variable ${(0, errors_1.idTextErr)(s.name)} is "void", which is not allowed`, s.loc);
                        }
                        sctx = addVariable(s.name, expressionType, ctx, sctx);
                    }
                }
                break;
            case "statement_assign":
                {
                    const tempSctx = { ...sctx, requiredFields: [] };
                    // Process lvalue
                    ctx = (0, resolveExpression_1.resolveExpression)(s.path, tempSctx, ctx);
                    const path = (0, ast_1.tryExtractPath)(s.path);
                    if (path === null) {
                        (0, errors_1.throwCompilationError)(`Assignments are allowed only into path expressions, i.e. identifiers, or sequences of direct contract/struct/message accesses, like "self.foo" or "self.structure.field"`, s.path.loc);
                    }
                    if (!isLvalue(path, ctx)) {
                        (0, errors_1.throwCompilationError)("Modifications of constant expressions are not allowed", s.path.loc);
                    }
                    // Process expression
                    ctx = (0, resolveExpression_1.resolveExpression)(s.expression, sctx, ctx);
                    // Check type
                    const expressionType = (0, resolveExpression_1.getExpType)(ctx, s.expression);
                    const tailType = (0, resolveExpression_1.getExpType)(ctx, s.path);
                    if (!(0, subtyping_1.isAssignable)(expressionType, tailType)) {
                        (0, errors_1.throwCompilationError)(`Type mismatch: "${(0, types_1.printTypeRef)(expressionType)}" is not assignable to "${(0, types_1.printTypeRef)(tailType)}"`, s.loc);
                    }
                    // Mark as assigned
                    if (path.length === 2 && path[0].text === "self") {
                        const field = path[1].text;
                        if (sctx.requiredFields.findIndex((v) => v === field) >=
                            0) {
                            sctx = removeRequiredVariable(field, sctx);
                        }
                    }
                }
                break;
            case "statement_augmentedassign":
                {
                    // Process lvalue
                    const tempSctx = { ...sctx, requiredFields: [] };
                    ctx = (0, resolveExpression_1.resolveExpression)(s.path, tempSctx, ctx);
                    const path = (0, ast_1.tryExtractPath)(s.path);
                    if (path === null) {
                        (0, errors_1.throwCompilationError)(`Assignments are allowed only into path expressions, i.e. identifiers, or sequences of direct contract/struct/message accesses, like "self.foo" or "self.structure.field"`, s.path.loc);
                    }
                    if (!isLvalue(path, ctx)) {
                        (0, errors_1.throwCompilationError)("Modifications of constant expressions are not allowed", s.path.loc);
                    }
                    // Process expression
                    ctx = (0, resolveExpression_1.resolveExpression)(s.expression, sctx, ctx);
                    // Check type
                    const expressionType = (0, resolveExpression_1.getExpType)(ctx, s.expression);
                    const tailType = (0, resolveExpression_1.getExpType)(ctx, s.path);
                    // Check if types are Int
                    if (expressionType.kind !== "ref" ||
                        expressionType.name !== "Int" ||
                        expressionType.optional ||
                        tailType.kind !== "ref" ||
                        tailType.name !== "Int" ||
                        tailType.optional) {
                        (0, errors_1.throwCompilationError)(`Type error: Augmented assignment is only allowed for Int type`, s.loc);
                    }
                }
                break;
            case "statement_expression":
                {
                    // Process expression
                    ctx = (0, resolveExpression_1.resolveExpression)(s.expression, sctx, ctx);
                    // take `throw` and `throwNative` into account when doing
                    // return-reachability analysis
                    if (s.expression.kind === "static_call" &&
                        ["throw", "nativeThrow"].includes((0, ast_1.idText)(s.expression.function))) {
                        returnAlwaysReachable = true;
                    }
                }
                break;
            case "statement_condition":
                {
                    // Process condition (expression resolved inside)
                    const r = processCondition(s, sctx, ctx);
                    ctx = r.ctx;
                    sctx = r.sctx;
                    returnAlwaysReachable ||= r.returnAlwaysReachable;
                    // Check type
                    const expressionType = (0, resolveExpression_1.getExpType)(ctx, s.condition);
                    if (expressionType.kind !== "ref" ||
                        expressionType.name !== "Bool" ||
                        expressionType.optional) {
                        (0, errors_1.throwCompilationError)(`Type mismatch: "${(0, types_1.printTypeRef)(expressionType)}" is not assignable to "Bool"`, s.loc);
                    }
                }
                break;
            case "statement_return":
                {
                    if (s.expression) {
                        // Process expression
                        ctx = (0, resolveExpression_1.resolveExpression)(s.expression, sctx, ctx);
                        // Check type
                        const expressionType = (0, resolveExpression_1.getExpType)(ctx, s.expression);
                        // Actually, we might relax the following restriction in the future
                        // Because `return foo()` means `foo(); return` for a void-returning function
                        // And `return foo()` looks nicer when the user needs early exit from a function
                        // right after executing `foo()`
                        if (expressionType.kind == "void") {
                            (0, errors_1.throwCompilationError)(`'return' statement can only be used with non-void types`, s.loc);
                        }
                        if (!(0, subtyping_1.isAssignable)(expressionType, sctx.returns)) {
                            (0, errors_1.throwCompilationError)(`Type mismatch: "${(0, types_1.printTypeRef)(expressionType)}" is not assignable to "${(0, types_1.printTypeRef)(sctx.returns)}"`, s.loc);
                        }
                    }
                    else {
                        if (sctx.returns.kind !== "void") {
                            (0, errors_1.throwCompilationError)(`The function fails to return a result of type "${(0, types_1.printTypeRef)(sctx.returns)}"`, s.loc);
                        }
                    }
                    // Check if all required variables are assigned
                    if (sctx.requiredFields.length > 0) {
                        if (sctx.requiredFields.length === 1) {
                            (0, errors_1.throwCompilationError)(`Field "${sctx.requiredFields[0]}" is not set`, sctx.root);
                        }
                        else {
                            (0, errors_1.throwCompilationError)(`Fields ${sctx.requiredFields.map((x) => '"' + x + '"').join(", ")} are not set`, sctx.root);
                        }
                    }
                    returnAlwaysReachable = true;
                }
                break;
            case "statement_repeat":
                {
                    // Process expression
                    ctx = (0, resolveExpression_1.resolveExpression)(s.iterations, sctx, ctx);
                    // Process statements
                    const r = processStatements(s.statements, sctx, ctx);
                    ctx = r.ctx;
                    // Check type
                    const expressionType = (0, resolveExpression_1.getExpType)(ctx, s.iterations);
                    if (expressionType.kind !== "ref" ||
                        expressionType.name !== "Int" ||
                        expressionType.optional) {
                        (0, errors_1.throwCompilationError)(`Type mismatch: "${(0, types_1.printTypeRef)(expressionType)}" is not assignable to "Int"`, s.loc);
                    }
                }
                break;
            case "statement_until":
                {
                    // Process expression
                    ctx = (0, resolveExpression_1.resolveExpression)(s.condition, sctx, ctx);
                    // Process statements
                    const r = processStatements(s.statements, sctx, ctx);
                    ctx = r.ctx;
                    // XXX a do-until loop is a weird place to always return from a function
                    // so we might want to issue a warning here
                    returnAlwaysReachable ||= r.returnAlwaysReachable;
                    // Check type
                    const expressionType = (0, resolveExpression_1.getExpType)(ctx, s.condition);
                    if (expressionType.kind !== "ref" ||
                        expressionType.name !== "Bool" ||
                        expressionType.optional) {
                        (0, errors_1.throwCompilationError)(`Type mismatch: "${(0, types_1.printTypeRef)(expressionType)}" is not assignable to "Bool"`, s.loc);
                    }
                }
                break;
            case "statement_while":
                {
                    // Process expression
                    ctx = (0, resolveExpression_1.resolveExpression)(s.condition, sctx, ctx);
                    // Process statements
                    const r = processStatements(s.statements, sctx, ctx);
                    ctx = r.ctx;
                    // a while loop might be executed zero times, so
                    // even if its body always returns from a function
                    // we don't care
                    // Check type
                    const expressionType = (0, resolveExpression_1.getExpType)(ctx, s.condition);
                    if (expressionType.kind !== "ref" ||
                        expressionType.name !== "Bool" ||
                        expressionType.optional) {
                        (0, errors_1.throwCompilationError)(`Type mismatch: "${(0, types_1.printTypeRef)(expressionType)}" is not assignable to "Bool"`, s.loc);
                    }
                }
                break;
            case "statement_try":
                {
                    // Process inner statements
                    const r = processStatements(s.statements, sctx, ctx);
                    ctx = r.ctx;
                    sctx = r.sctx;
                    // try-statement might not return from the current function
                    // because the control flow can go to the empty catch block
                }
                break;
            case "statement_try_catch":
                {
                    let initialSctx = sctx;
                    // Process inner statements
                    const r = processStatements(s.statements, sctx, ctx);
                    ctx = r.ctx;
                    let catchCtx = sctx;
                    // Process catchName variable for exit code
                    checkVariableExists(ctx, initialSctx, s.catchName);
                    catchCtx = addVariable(s.catchName, { kind: "ref", name: "Int", optional: false }, ctx, initialSctx);
                    // Process catch statements
                    const rCatch = processStatements(s.catchStatements, catchCtx, ctx);
                    ctx = rCatch.ctx;
                    catchCtx = rCatch.sctx;
                    // if both catch- and try- blocks always return from the current function
                    // we mark the whole try-catch statement as always returning
                    returnAlwaysReachable ||=
                        r.returnAlwaysReachable && rCatch.returnAlwaysReachable;
                    // Merge statement contexts
                    const removed = [];
                    for (const f of initialSctx.requiredFields) {
                        if (!catchCtx.requiredFields.find((v) => v === f)) {
                            removed.push(f);
                        }
                    }
                    for (const r of removed) {
                        initialSctx = removeRequiredVariable(r, initialSctx);
                    }
                }
                break;
            case "statement_foreach": {
                let initialSctx = sctx; // Preserve initial context to use later for merging
                // Resolve map expression
                ctx = (0, resolveExpression_1.resolveExpression)(s.map, sctx, ctx);
                const mapPath = (0, ast_1.tryExtractPath)(s.map);
                if (mapPath === null) {
                    (0, errors_1.throwCompilationError)(`foreach is only allowed over maps that are path expressions, i.e. identifiers, or sequences of direct contract/struct/message accesses, like "self.foo" or "self.structure.field"`, s.map.loc);
                }
                // Check if map is valid
                const mapType = (0, resolveExpression_1.getExpType)(ctx, s.map);
                if (mapType.kind !== "map") {
                    (0, errors_1.throwCompilationError)(`foreach can only be used on maps, but "${mapPath.map((id) => id.text).join(".")}" has type "${(0, types_1.printTypeRef)(mapType)}"`, s.map.loc);
                }
                let foreachSctx = sctx;
                // Add key and value to statement context
                if (!(0, ast_1.isWildcard)(s.keyName)) {
                    checkVariableExists(ctx, initialSctx, s.keyName);
                    foreachSctx = addVariable(s.keyName, { kind: "ref", name: mapType.key, optional: false }, ctx, initialSctx);
                }
                if (!(0, ast_1.isWildcard)(s.valueName)) {
                    checkVariableExists(ctx, foreachSctx, s.valueName);
                    foreachSctx = addVariable(s.valueName, { kind: "ref", name: mapType.value, optional: false }, ctx, foreachSctx);
                }
                // Process inner statements
                const r = processStatements(s.statements, foreachSctx, ctx);
                ctx = r.ctx;
                foreachSctx = r.sctx;
                // Merge statement contexts (similar to catch block merging)
                const removed = [];
                for (const f of initialSctx.requiredFields) {
                    if (!foreachSctx.requiredFields.find((v) => v === f)) {
                        removed.push(f);
                    }
                }
                for (const r of removed) {
                    initialSctx = removeRequiredVariable(r, initialSctx);
                }
                sctx = initialSctx; // Re-assign the modified initial context back to sctx after merging
            }
        }
    }
    return { ctx, sctx, returnAlwaysReachable };
}
function processFunctionBody(statements, sctx, ctx) {
    const res = processStatements(statements, sctx, ctx);
    // Check if a non-void function always returns a value
    if (sctx.returns.kind !== "void" && !res.returnAlwaysReachable) {
        (0, errors_1.throwCompilationError)(`Function does not always return a result. Adding 'return' statement(s) should fix the issue.`, res.sctx.root);
    }
    // Check if all required variables are assigned
    if (res.sctx.requiredFields.length > 0) {
        if (res.sctx.requiredFields.length === 1) {
            (0, errors_1.throwCompilationError)(`Field "${res.sctx.requiredFields[0]}" is not set`, res.sctx.root);
        }
        else {
            (0, errors_1.throwCompilationError)(`Fields ${res.sctx.requiredFields.map((x) => '"' + x + '"').join(", ")} are not set`, res.sctx.root);
        }
    }
    return res.ctx;
}
function resolveStatements(ctx) {
    // Process all static functions
    for (const f of Object.values((0, resolveDescriptors_1.getAllStaticFunctions)(ctx))) {
        if (f.ast.kind === "function_def") {
            // Build statement context
            let sctx = emptyContext(f.ast.loc, f.name, f.returns);
            for (const p of f.params) {
                sctx = addVariable(p.name, p.type, ctx, sctx);
            }
            ctx = processFunctionBody(f.ast.statements, sctx, ctx);
        }
    }
    // Process all types
    for (const t of Object.values((0, resolveDescriptors_1.getAllTypes)(ctx))) {
        // Process init
        if (t.init) {
            // Build statement context
            let sctx = emptyContext(t.init.ast.loc, null, { kind: "void" });
            // Self
            sctx = addVariable(ast_1.selfId, { kind: "ref", name: t.name, optional: false }, ctx, sctx);
            // Required variables
            for (const f of t.fields) {
                if (f.default !== undefined) {
                    // NOTE: undefined is important here
                    continue;
                }
                if ((0, subtyping_1.isAssignable)({ kind: "null" }, f.type)) {
                    continue;
                }
                sctx = addRequiredVariables(f.name, sctx);
            }
            // Args
            for (const p of t.init.params) {
                sctx = addVariable(p.name, p.type, ctx, sctx);
            }
            // Process
            ctx = processFunctionBody(t.init.ast.statements, sctx, ctx);
        }
        // Process receivers
        for (const f of Object.values(t.receivers)) {
            // Build statement context
            let sctx = emptyContext(f.ast.loc, null, { kind: "void" });
            sctx = addVariable(ast_1.selfId, { kind: "ref", name: t.name, optional: false }, ctx, sctx);
            switch (f.selector.kind) {
                case "internal-binary":
                case "external-binary":
                    {
                        sctx = addVariable(f.selector.name, {
                            kind: "ref",
                            name: f.selector.type,
                            optional: false,
                        }, ctx, sctx);
                    }
                    break;
                case "internal-empty":
                case "external-empty":
                case "external-comment":
                case "internal-comment":
                    // Nothing to add to context
                    break;
                case "internal-comment-fallback":
                case "external-comment-fallback":
                    {
                        sctx = addVariable(f.selector.name, { kind: "ref", name: "String", optional: false }, ctx, sctx);
                    }
                    break;
                case "internal-fallback":
                case "external-fallback":
                    {
                        sctx = addVariable(f.selector.name, { kind: "ref", name: "Slice", optional: false }, ctx, sctx);
                    }
                    break;
                case "bounce-fallback":
                    {
                        sctx = addVariable(f.selector.name, { kind: "ref", name: "Slice", optional: false }, ctx, sctx);
                    }
                    break;
                case "bounce-binary":
                    {
                        sctx = addVariable(f.selector.name, f.selector.bounced
                            ? { kind: "ref_bounced", name: f.selector.type }
                            : {
                                kind: "ref",
                                name: f.selector.type,
                                optional: false,
                            }, ctx, sctx);
                    }
                    break;
            }
            // Process
            ctx = processFunctionBody(f.ast.statements, sctx, ctx);
        }
        // Process functions
        for (const f of t.functions.values()) {
            if (f.ast.kind !== "native_function_decl" &&
                f.ast.kind !== "function_decl") {
                // Build statement context
                let sctx = emptyContext(f.ast.loc, f.name, f.returns);
                sctx = addVariable(ast_1.selfId, { kind: "ref", name: t.name, optional: false }, ctx, sctx);
                for (const a of f.params) {
                    sctx = addVariable(a.name, a.type, ctx, sctx);
                }
                ctx = processFunctionBody(f.ast.statements, sctx, ctx);
            }
        }
    }
    return ctx;
}
exports.resolveStatements = resolveStatements;
