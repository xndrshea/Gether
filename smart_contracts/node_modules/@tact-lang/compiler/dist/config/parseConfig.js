"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyConfig = exports.parseConfig = void 0;
const zod_1 = require("zod");
const optionsSchema = zod_1.z
    .object({
    /**
     * If set to true, enables debug output of a contract and allows usage of `dump()` function,
     * which is useful for debugging purposes.
     *
     * Read more: https://docs.tact-lang.org/book/debug
     */
    debug: zod_1.z.boolean().optional(),
    /**
     * If set to true, enables masterchain support.
     *
     * Read more: https://docs.tact-lang.org/book/masterchain
     */
    masterchain: zod_1.z.boolean().optional(),
    /**
     * If set to true, enables support of external message receivers.
     *
     * Read more: https://docs.tact-lang.org/book/external
     */
    external: zod_1.z.boolean().optional(),
    /**
     * If set to true, enables generation of a getter with IPFS links describing the contract's ABI.
     *
     * Read more: https://docs.tact-lang.org/ref/evolution/OTP-003
     */
    ipfsAbiGetter: zod_1.z.boolean().optional(),
    /**
     * If set to true, enables generation of a getter with a list of interfaces provided by the contract.
     *
     * Read more: https://docs.tact-lang.org/book/contracts#interfaces
     */
    interfacesGetter: zod_1.z.boolean().optional(),
    /**
     * Experimental options that might be removed in the future. Use with caution!
     */
    experimental: zod_1.z
        .object({
        /**
         * If set to true, enables inlining of all functions in contracts.
         * This can reduce gas usage at the cost of bigger contracts.
         */
        inline: zod_1.z.boolean().optional(),
    })
        .strict()
        .optional(),
})
    .strict();
const projectSchema = zod_1.z
    .object({
    /**
     * Name of the project. All generated files are prefixed with it.
     *
     * Read more: https://docs.tact-lang.org/book/config#projects-name
     */
    name: zod_1.z.string(),
    /**
     * Path to the project's Tact file. You can only specify one Tact file per project.
     *
     * Read more: https://docs.tact-lang.org/book/config#projects-path
     */
    path: zod_1.z.string(),
    /**
     * Path to the directory where all generated files will be placed.
     *
     * Read more: https://docs.tact-lang.org/book/config#projects-output
     */
    output: zod_1.z.string(),
    /**
     * Compilation options for the project.
     *
     * Read more: https://docs.tact-lang.org/book/config#projects-options
     */
    options: optionsSchema.optional(),
    /**
     * Compilation mode of the project.
     *
     * Read more: https://docs.tact-lang.org/book/config#projects-mode
     */
    mode: zod_1.z
        .enum(["fullWithDecompilation", "full", "funcOnly", "checkOnly"])
        .optional(),
})
    .strict();
const configSchema = zod_1.z
    .object({
    /**
     * A property for specifying a path or URL to the JSON schema of tact.config.json
     *
     * Read more: https://docs.tact-lang.org/book/config#schema
     */
    $schema: zod_1.z.string().optional(),
    /**
     * List of Tact projects with respective compilation options. Each .tact file represents its own Tact project.
     *
     * Read more: https://docs.tact-lang.org/book/config#projects
     */
    projects: zod_1.z.array(projectSchema),
})
    .strict();
/**
 * Takes a stringified JSON [src] of a schema, converts to JSON and returns a parsed schema if it's valid
 *
 * @throws If the provided JSON string isn't a valid JSON
 * @throws If the provided JSON string isn't valid according to the config schema
 */
function parseConfig(src) {
    const parsed = JSON.parse(src);
    return configSchema.parse(parsed);
}
exports.parseConfig = parseConfig;
/**
 * Takes a config schema object and verifies that it's valid
 *
 * @throws If the provided object isn't valid according to the config schema
 */
function verifyConfig(config) {
    return configSchema.parse(config);
}
exports.verifyConfig = verifyConfig;
