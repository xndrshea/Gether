import { z } from "zod";
declare const optionsSchema: z.ZodObject<{
    /**
     * If set to true, enables debug output of a contract and allows usage of `dump()` function,
     * which is useful for debugging purposes.
     *
     * Read more: https://docs.tact-lang.org/book/debug
     */
    debug: z.ZodOptional<z.ZodBoolean>;
    /**
     * If set to true, enables masterchain support.
     *
     * Read more: https://docs.tact-lang.org/book/masterchain
     */
    masterchain: z.ZodOptional<z.ZodBoolean>;
    /**
     * If set to true, enables support of external message receivers.
     *
     * Read more: https://docs.tact-lang.org/book/external
     */
    external: z.ZodOptional<z.ZodBoolean>;
    /**
     * If set to true, enables generation of a getter with IPFS links describing the contract's ABI.
     *
     * Read more: https://docs.tact-lang.org/ref/evolution/OTP-003
     */
    ipfsAbiGetter: z.ZodOptional<z.ZodBoolean>;
    /**
     * If set to true, enables generation of a getter with a list of interfaces provided by the contract.
     *
     * Read more: https://docs.tact-lang.org/book/contracts#interfaces
     */
    interfacesGetter: z.ZodOptional<z.ZodBoolean>;
    /**
     * Experimental options that might be removed in the future. Use with caution!
     */
    experimental: z.ZodOptional<z.ZodObject<{
        /**
         * If set to true, enables inlining of all functions in contracts.
         * This can reduce gas usage at the cost of bigger contracts.
         */
        inline: z.ZodOptional<z.ZodBoolean>;
    }, "strict", z.ZodTypeAny, {
        inline?: boolean | undefined;
    }, {
        inline?: boolean | undefined;
    }>>;
}, "strict", z.ZodTypeAny, {
    debug?: boolean | undefined;
    masterchain?: boolean | undefined;
    external?: boolean | undefined;
    ipfsAbiGetter?: boolean | undefined;
    interfacesGetter?: boolean | undefined;
    experimental?: {
        inline?: boolean | undefined;
    } | undefined;
}, {
    debug?: boolean | undefined;
    masterchain?: boolean | undefined;
    external?: boolean | undefined;
    ipfsAbiGetter?: boolean | undefined;
    interfacesGetter?: boolean | undefined;
    experimental?: {
        inline?: boolean | undefined;
    } | undefined;
}>;
declare const projectSchema: z.ZodObject<{
    /**
     * Name of the project. All generated files are prefixed with it.
     *
     * Read more: https://docs.tact-lang.org/book/config#projects-name
     */
    name: z.ZodString;
    /**
     * Path to the project's Tact file. You can only specify one Tact file per project.
     *
     * Read more: https://docs.tact-lang.org/book/config#projects-path
     */
    path: z.ZodString;
    /**
     * Path to the directory where all generated files will be placed.
     *
     * Read more: https://docs.tact-lang.org/book/config#projects-output
     */
    output: z.ZodString;
    /**
     * Compilation options for the project.
     *
     * Read more: https://docs.tact-lang.org/book/config#projects-options
     */
    options: z.ZodOptional<z.ZodObject<{
        /**
         * If set to true, enables debug output of a contract and allows usage of `dump()` function,
         * which is useful for debugging purposes.
         *
         * Read more: https://docs.tact-lang.org/book/debug
         */
        debug: z.ZodOptional<z.ZodBoolean>;
        /**
         * If set to true, enables masterchain support.
         *
         * Read more: https://docs.tact-lang.org/book/masterchain
         */
        masterchain: z.ZodOptional<z.ZodBoolean>;
        /**
         * If set to true, enables support of external message receivers.
         *
         * Read more: https://docs.tact-lang.org/book/external
         */
        external: z.ZodOptional<z.ZodBoolean>;
        /**
         * If set to true, enables generation of a getter with IPFS links describing the contract's ABI.
         *
         * Read more: https://docs.tact-lang.org/ref/evolution/OTP-003
         */
        ipfsAbiGetter: z.ZodOptional<z.ZodBoolean>;
        /**
         * If set to true, enables generation of a getter with a list of interfaces provided by the contract.
         *
         * Read more: https://docs.tact-lang.org/book/contracts#interfaces
         */
        interfacesGetter: z.ZodOptional<z.ZodBoolean>;
        /**
         * Experimental options that might be removed in the future. Use with caution!
         */
        experimental: z.ZodOptional<z.ZodObject<{
            /**
             * If set to true, enables inlining of all functions in contracts.
             * This can reduce gas usage at the cost of bigger contracts.
             */
            inline: z.ZodOptional<z.ZodBoolean>;
        }, "strict", z.ZodTypeAny, {
            inline?: boolean | undefined;
        }, {
            inline?: boolean | undefined;
        }>>;
    }, "strict", z.ZodTypeAny, {
        debug?: boolean | undefined;
        masterchain?: boolean | undefined;
        external?: boolean | undefined;
        ipfsAbiGetter?: boolean | undefined;
        interfacesGetter?: boolean | undefined;
        experimental?: {
            inline?: boolean | undefined;
        } | undefined;
    }, {
        debug?: boolean | undefined;
        masterchain?: boolean | undefined;
        external?: boolean | undefined;
        ipfsAbiGetter?: boolean | undefined;
        interfacesGetter?: boolean | undefined;
        experimental?: {
            inline?: boolean | undefined;
        } | undefined;
    }>>;
    /**
     * Compilation mode of the project.
     *
     * Read more: https://docs.tact-lang.org/book/config#projects-mode
     */
    mode: z.ZodOptional<z.ZodEnum<["fullWithDecompilation", "full", "funcOnly", "checkOnly"]>>;
}, "strict", z.ZodTypeAny, {
    path: string;
    name: string;
    output: string;
    options?: {
        debug?: boolean | undefined;
        masterchain?: boolean | undefined;
        external?: boolean | undefined;
        ipfsAbiGetter?: boolean | undefined;
        interfacesGetter?: boolean | undefined;
        experimental?: {
            inline?: boolean | undefined;
        } | undefined;
    } | undefined;
    mode?: "fullWithDecompilation" | "full" | "funcOnly" | "checkOnly" | undefined;
}, {
    path: string;
    name: string;
    output: string;
    options?: {
        debug?: boolean | undefined;
        masterchain?: boolean | undefined;
        external?: boolean | undefined;
        ipfsAbiGetter?: boolean | undefined;
        interfacesGetter?: boolean | undefined;
        experimental?: {
            inline?: boolean | undefined;
        } | undefined;
    } | undefined;
    mode?: "fullWithDecompilation" | "full" | "funcOnly" | "checkOnly" | undefined;
}>;
declare const configSchema: z.ZodObject<{
    /**
     * A property for specifying a path or URL to the JSON schema of tact.config.json
     *
     * Read more: https://docs.tact-lang.org/book/config#schema
     */
    $schema: z.ZodOptional<z.ZodString>;
    /**
     * List of Tact projects with respective compilation options. Each .tact file represents its own Tact project.
     *
     * Read more: https://docs.tact-lang.org/book/config#projects
     */
    projects: z.ZodArray<z.ZodObject<{
        /**
         * Name of the project. All generated files are prefixed with it.
         *
         * Read more: https://docs.tact-lang.org/book/config#projects-name
         */
        name: z.ZodString;
        /**
         * Path to the project's Tact file. You can only specify one Tact file per project.
         *
         * Read more: https://docs.tact-lang.org/book/config#projects-path
         */
        path: z.ZodString;
        /**
         * Path to the directory where all generated files will be placed.
         *
         * Read more: https://docs.tact-lang.org/book/config#projects-output
         */
        output: z.ZodString;
        /**
         * Compilation options for the project.
         *
         * Read more: https://docs.tact-lang.org/book/config#projects-options
         */
        options: z.ZodOptional<z.ZodObject<{
            /**
             * If set to true, enables debug output of a contract and allows usage of `dump()` function,
             * which is useful for debugging purposes.
             *
             * Read more: https://docs.tact-lang.org/book/debug
             */
            debug: z.ZodOptional<z.ZodBoolean>;
            /**
             * If set to true, enables masterchain support.
             *
             * Read more: https://docs.tact-lang.org/book/masterchain
             */
            masterchain: z.ZodOptional<z.ZodBoolean>;
            /**
             * If set to true, enables support of external message receivers.
             *
             * Read more: https://docs.tact-lang.org/book/external
             */
            external: z.ZodOptional<z.ZodBoolean>;
            /**
             * If set to true, enables generation of a getter with IPFS links describing the contract's ABI.
             *
             * Read more: https://docs.tact-lang.org/ref/evolution/OTP-003
             */
            ipfsAbiGetter: z.ZodOptional<z.ZodBoolean>;
            /**
             * If set to true, enables generation of a getter with a list of interfaces provided by the contract.
             *
             * Read more: https://docs.tact-lang.org/book/contracts#interfaces
             */
            interfacesGetter: z.ZodOptional<z.ZodBoolean>;
            /**
             * Experimental options that might be removed in the future. Use with caution!
             */
            experimental: z.ZodOptional<z.ZodObject<{
                /**
                 * If set to true, enables inlining of all functions in contracts.
                 * This can reduce gas usage at the cost of bigger contracts.
                 */
                inline: z.ZodOptional<z.ZodBoolean>;
            }, "strict", z.ZodTypeAny, {
                inline?: boolean | undefined;
            }, {
                inline?: boolean | undefined;
            }>>;
        }, "strict", z.ZodTypeAny, {
            debug?: boolean | undefined;
            masterchain?: boolean | undefined;
            external?: boolean | undefined;
            ipfsAbiGetter?: boolean | undefined;
            interfacesGetter?: boolean | undefined;
            experimental?: {
                inline?: boolean | undefined;
            } | undefined;
        }, {
            debug?: boolean | undefined;
            masterchain?: boolean | undefined;
            external?: boolean | undefined;
            ipfsAbiGetter?: boolean | undefined;
            interfacesGetter?: boolean | undefined;
            experimental?: {
                inline?: boolean | undefined;
            } | undefined;
        }>>;
        /**
         * Compilation mode of the project.
         *
         * Read more: https://docs.tact-lang.org/book/config#projects-mode
         */
        mode: z.ZodOptional<z.ZodEnum<["fullWithDecompilation", "full", "funcOnly", "checkOnly"]>>;
    }, "strict", z.ZodTypeAny, {
        path: string;
        name: string;
        output: string;
        options?: {
            debug?: boolean | undefined;
            masterchain?: boolean | undefined;
            external?: boolean | undefined;
            ipfsAbiGetter?: boolean | undefined;
            interfacesGetter?: boolean | undefined;
            experimental?: {
                inline?: boolean | undefined;
            } | undefined;
        } | undefined;
        mode?: "fullWithDecompilation" | "full" | "funcOnly" | "checkOnly" | undefined;
    }, {
        path: string;
        name: string;
        output: string;
        options?: {
            debug?: boolean | undefined;
            masterchain?: boolean | undefined;
            external?: boolean | undefined;
            ipfsAbiGetter?: boolean | undefined;
            interfacesGetter?: boolean | undefined;
            experimental?: {
                inline?: boolean | undefined;
            } | undefined;
        } | undefined;
        mode?: "fullWithDecompilation" | "full" | "funcOnly" | "checkOnly" | undefined;
    }>, "many">;
}, "strict", z.ZodTypeAny, {
    projects: {
        path: string;
        name: string;
        output: string;
        options?: {
            debug?: boolean | undefined;
            masterchain?: boolean | undefined;
            external?: boolean | undefined;
            ipfsAbiGetter?: boolean | undefined;
            interfacesGetter?: boolean | undefined;
            experimental?: {
                inline?: boolean | undefined;
            } | undefined;
        } | undefined;
        mode?: "fullWithDecompilation" | "full" | "funcOnly" | "checkOnly" | undefined;
    }[];
    $schema?: string | undefined;
}, {
    projects: {
        path: string;
        name: string;
        output: string;
        options?: {
            debug?: boolean | undefined;
            masterchain?: boolean | undefined;
            external?: boolean | undefined;
            ipfsAbiGetter?: boolean | undefined;
            interfacesGetter?: boolean | undefined;
            experimental?: {
                inline?: boolean | undefined;
            } | undefined;
        } | undefined;
        mode?: "fullWithDecompilation" | "full" | "funcOnly" | "checkOnly" | undefined;
    }[];
    $schema?: string | undefined;
}>;
/**
 * Compiler configuration schema
 *
 * Read more: https://docs.tact-lang.org/book/config
 */
export type Config = z.infer<typeof configSchema>;
/**
 * Per-project configuration options
 *
 * Read more: https://docs.tact-lang.org/book/config#projects
 */
export type ConfigProject = z.infer<typeof projectSchema>;
/**
 * Per-project configuration options
 *
 * Read more: https://docs.tact-lang.org/book/config#projects
 */
export type Options = z.infer<typeof optionsSchema>;
/**
 * Takes a stringified JSON [src] of a schema, converts to JSON and returns a parsed schema if it's valid
 *
 * @throws If the provided JSON string isn't a valid JSON
 * @throws If the provided JSON string isn't valid according to the config schema
 */
export declare function parseConfig(src: string): {
    projects: {
        path: string;
        name: string;
        output: string;
        options?: {
            debug?: boolean | undefined;
            masterchain?: boolean | undefined;
            external?: boolean | undefined;
            ipfsAbiGetter?: boolean | undefined;
            interfacesGetter?: boolean | undefined;
            experimental?: {
                inline?: boolean | undefined;
            } | undefined;
        } | undefined;
        mode?: "fullWithDecompilation" | "full" | "funcOnly" | "checkOnly" | undefined;
    }[];
    $schema?: string | undefined;
};
/**
 * Takes a config schema object and verifies that it's valid
 *
 * @throws If the provided object isn't valid according to the config schema
 */
export declare function verifyConfig(config: Config): {
    projects: {
        path: string;
        name: string;
        output: string;
        options?: {
            debug?: boolean | undefined;
            masterchain?: boolean | undefined;
            external?: boolean | undefined;
            ipfsAbiGetter?: boolean | undefined;
            interfacesGetter?: boolean | undefined;
            experimental?: {
                inline?: boolean | undefined;
            } | undefined;
        } | undefined;
        mode?: "fullWithDecompilation" | "full" | "funcOnly" | "checkOnly" | undefined;
    }[];
    $schema?: string | undefined;
};
export {};
