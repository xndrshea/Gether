import { AstConstantDef, AstImport, AstNativeFunctionDecl, AstReceiver, AstStatementRepeat, AstStatementUntil, AstStatementWhile, AstStatementForEach, AstStatementTry, AstStatementTryCatch, AstCondition, AstStatementAugmentedAssign, AstStatementAssign, AstStatementExpression, AstStatementReturn, AstStatementLet, AstFunctionDef, AstType, AstStatement, AstExpression, AstContract, AstTrait, AstId, AstModule, AstModuleItem, AstStructDecl, AstMessageDecl, AstTraitDeclaration, AstFunctionDecl, AstConstantDecl, AstContractDeclaration, AstContractInit, AstStructFieldInitializer, AstPrimitiveTypeDecl, AstTypeId, AstMapType, AstBouncedMessageType, AstFieldDecl, AstOptionalType, AstNode, AstFuncId } from "./grammar/ast";
/**
 * Provides methods to format and indent Tact code.
 */
export declare class PrettyPrinter {
    private indentLevel;
    private readonly indentSpaces;
    /**
     * @param indentLevel Initial level of indentation.
     * @param indentSpaces Number of spaces per indentation level.
     */
    constructor(indentLevel?: number, indentSpaces?: number);
    private increaseIndent;
    private decreaseIndent;
    private indent;
    ppAstPrimitiveTypeDecl(primitive: AstPrimitiveTypeDecl): string;
    ppAstType(typeRef: AstType): string;
    ppAstTypeId(typeRef: AstTypeId): string;
    ppAstOptionalType(typeRef: AstOptionalType): string;
    ppAstMapType(typeRef: AstMapType): string;
    ppAstBouncedMessageType(typeRef: AstBouncedMessageType): string;
    /**
     * Returns precedence used in unary/binary operations.
     * Lower number means higher precedence
     */
    getPrecedence(kind: string, op?: string): number;
    ppAstExpression(expr: AstExpression, parentPrecedence?: number): string;
    ppAstStructFieldInit(param: AstStructFieldInitializer): string;
    ppAstModule(program: AstModule): string;
    ppModuleItem(item: AstModuleItem): string;
    ppAstImport(importItem: AstImport): string;
    ppAstStruct(struct: AstStructDecl): string;
    ppAstMessage(struct: AstMessageDecl): string;
    ppAstTrait(trait: AstTrait): string;
    ppTraitBody(item: AstTraitDeclaration): string;
    ppAstFieldDecl(field: AstFieldDecl): string;
    ppAstConstant(constant: AstConstantDef): string;
    ppAstConstDecl(constant: AstConstantDecl): string;
    ppAstContract(contract: AstContract): string;
    ppContractBody(declaration: AstContractDeclaration): string;
    ppAstFunctionDef(func: AstFunctionDef): string;
    ppAstFunctionDecl(func: AstFunctionDecl): string;
    ppAstReceiver(receive: AstReceiver): string;
    ppAstReceiverHeader(receive: AstReceiver): string;
    ppAstNativeFunction(func: AstNativeFunctionDecl): string;
    ppAstFuncId(func: AstFuncId): string;
    ppAstInitFunction(initFunc: AstContractInit): string;
    ppAstStatement(stmt: AstStatement): string;
    ppStatementBlock(stmts: AstStatement[]): string;
    ppAstStatementLet(statement: AstStatementLet): string;
    ppAstStatementReturn(statement: AstStatementReturn): string;
    ppAstStatementExpression(statement: AstStatementExpression): string;
    ppAstId(id: AstId): string;
    ppAstStatementAssign(statement: AstStatementAssign): string;
    ppAstStatementAugmentedAssign(statement: AstStatementAugmentedAssign): string;
    ppAstCondition(statement: AstCondition): string;
    ppAstStatementWhile(statement: AstStatementWhile): string;
    ppAstStatementRepeat(statement: AstStatementRepeat): string;
    ppAstStatementUntil(statement: AstStatementUntil): string;
    ppAstStatementForEach(statement: AstStatementForEach): string;
    ppAstStatementTry(statement: AstStatementTry): string;
    ppAstStatementTryCatch(statement: AstStatementTryCatch): string;
}
/**
 * Pretty-prints an AST node into a string representation.
 * @param node The AST node to format.
 * @returns A string that represents the formatted AST node.
 */
export declare function prettyPrint(node: AstNode): string;
