import { MatchResult } from "ohm-js";
import { AstFuncId, AstId, AstTypeId, SrcInfo } from "./grammar/ast";
import { ItemOrigin } from "./grammar/grammar";
export declare class TactError extends Error {
    readonly loc?: SrcInfo;
    constructor(message: string, loc?: SrcInfo);
}
export declare class TactParseError extends TactError {
    constructor(message: string, loc: SrcInfo);
}
export declare class TactSyntaxError extends TactError {
    constructor(message: string, loc: SrcInfo);
}
export declare class TactCompilationError extends TactError {
    constructor(message: string, loc?: SrcInfo);
}
export declare class TactInternalCompilerError extends TactError {
    constructor(message: string, loc?: SrcInfo);
}
export declare class TactConstEvalError extends TactCompilationError {
    fatal: boolean;
    constructor(message: string, fatal: boolean, loc: SrcInfo);
}
export declare function throwParseError(matchResult: MatchResult, path: string, origin: ItemOrigin): never;
export declare function throwSyntaxError(message: string, source: SrcInfo): never;
export declare function throwCompilationError(message: string, source?: SrcInfo): never;
export declare function throwInternalCompilerError(message: string, source?: SrcInfo): never;
export declare function throwConstEvalError(message: string, fatal: boolean, source: SrcInfo): never;
export declare function idTextErr(ident: AstId | AstFuncId | AstTypeId | string): string;
export type TactErrorCollection = Error | TactParseError | TactSyntaxError | TactCompilationError | TactInternalCompilerError | TactConstEvalError;
